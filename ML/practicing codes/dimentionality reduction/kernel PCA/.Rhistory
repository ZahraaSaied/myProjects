View(dataset)
library(caTools)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
View(test_set)
library(caret)
library(caret)
pca = preProcess(x = training_set[-14],
method = "pca",
pcaComp = 2)
training_set = predict(pca, training_set)
View(training_set)
training_set = training_set[c(2, 3, 1)]
View(training_set)
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
View(test_set)
library(e1071)
View(training_set)
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
x = training_set[-14],
y = training_set$Customer_Segment,
type = "C-classification",
kernel = "linear")
y_pred = predict(classifier, newdata = test_set[-3])
y_pred = predict(classifier, newdata = test_set[, 3])
View(test_set)
dataset = read.csv("Wine.csv")
# Split the dataset into training and test sets
library(caTools)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
View(training_set)
library(caret)
pca = preProcess(x = training_set[-14],
method = "pca",
pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
View(training_set)
View(test_set)
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
x = training_set[-3],
y = training_set$Customer_Segment,
type = "C-classification",
kernel = "linear")
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
cm = table(test_set[3], y_pred)
cm = table(test_set[, 3], y_pred)
cm
dataset = read.csv("Wine.csv")
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
# Applying PCA for feature extraction
library(caret)
pca = preProcess(x = training_set[-14],
method = "pca",
pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
# Apply SVM for the classification task
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
x = training_set[-3],
y = training_set$Customer_Segment,
type = "C-classification",
kernel = "linear")
# predict the test set results
y_pred = predict(classifier, newdata = test_set[-3])
# The confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
View(test_set)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 2, 'green4', 'red3')))
install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 2, 'green4', 'red3')))
# Visualising the Test set results
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
142 - 6
136 / 142
library(MASS)
setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/dimentionality reduction/LDA")
library(MASS)
# Import the dataset
dataset = read.csv("Wine.csv")
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
da = lda(formula = Customer_Segment ~ .,
data = training_set)
training_set = predict(lda, training_set)
lda = lda(formula = Customer_Segment ~ .,
data = training_set)
training_set = as.data.frame(predict(lda, training_set))
View(training_set)
training_set = training_set[c(5, 6, 1)]
test_set = as.data.frame(predict(lda, test_set))
test_set = test_set[c(5, 6, 1)]
View(test_set)
View(test_set)
classifier = svm(formula = class ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
y_pred = predict(classifier, newdata = test_set[-3])
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('x.LD1', 'x.LD2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'LDA Feature 1', ylab = 'LDA Feature 2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 2, 'green4', 'red3')))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('x.LD1', 'x.LD1')
y_grid = y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Test set)',
xlab = 'LDA Feature 1', ylab = 'LDA Feature 2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
View(test_set)
# Visualising the Test set results
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('x.LD1', 'x.LD2')
y_grid = y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Test set)',
xlab = 'LDA Feature 1', ylab = 'LDA Feature 2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
install.packages("kernlab")
setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/dimentionality reduction/kernel PCA")
dataset = read.csv("Social_Network_Ads.csv")
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/dimentionality reduction/kernel PCA")
# Import the dataset
dataset = read.csv("Social_Network_Ads.csv")
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Customer_Segment, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset = read.csv("Social_Network_Ads.csv")
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/dimentionality reduction/kernel PCA")
# Import the dataset
dataset = read.csv("Social_Network_Ads.csv")
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-14] = scale(training_set[-14])
test_set[-14] = scale(test_set[-14])
View(training_set)
setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/dimentionality reduction/kernel PCA")
# Import the dataset
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[3:5]
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
View(training_set)
library(kernlab)
kpca = kpca(formula = ~.,
data = training_set[-3],
kernel = "rbfdot",
features = 2)
library(kernlab)
kpca = kpca(formula = ~.,
data = training_set[-3],
kernel = "rbfdot",
features = 2)
kpca = kpca(~.,
data = training_set[-3],
kernel = "rbfdot",
features = 2)
training_set_pca =as.data.frame(predict(kpca, training_set))
View(training_set_pca)
View(training_set)
training_set_pca$Purchased = training_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
View(training_set_pca)
View(test_set_pca)
classifier = glm(formula = Purchased ~ .,
family = "binomial",
data = training_set)
classifier = glm(formula = Purchased ~ .,
family = "binomial",
data = training_set_pca)
y_pred = predict(classifier, newdata = test_set_pca[-3])
cm = table(test_set_pca[, 3], y_pred)
cm
setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/dimentionality reduction/kernel PCA")
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[3:5]
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(kernlab)
kpca = kpca(~.,
data = training_set[-3],
kernel = "rbfdot",
features = 2)
training_set_pca =as.data.frame(predict(kpca, training_set))
training_set_pca$Purchased = training_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
classifier = glm(formula = Purchased ~ .,
family = "binomial",
data = training_set_pca)
y_pred = predict(classifier, newdata = test_set_pca[-3])
# The confusion Matrix
cm = table(test_set_pca[, 3], y_pred)
cm
y_pred = predict(classifier,type = 'response', newdata = test_set_pca[-3])
y_pred
y_pred = (y_pred > 0.5)
cm = table(test_set_pca[, 3], y_pred)
cm
y_pred = predict(classifier,type = 'response', newdata = test_set_pca[-3])
y_pred = ifelse(y_pred > 0.5, 1, 0)
y_pred
cm = table(test_set_pca[, 3], y_pred)
cm
# Kernel PCA algorithm
# Import the dataset
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[3:5]
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Applying Kernel PCA for feature extraction
library(kernlab)
kpca = kpca(~.,
data = training_set[-3],
kernel = "rbfdot",
features = 2)
training_set_pca =as.data.frame(predict(kpca, training_set))
training_set_pca$Purchased = training_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
# Apply Logistic Regression for the classification task
classifier = glm(formula = Purchased ~ .,
family = "binomial",
data = training_set_pca)
# predict the test set results
y_pred = predict(classifier,type = 'response', newdata = test_set_pca[-3])
y_pred = ifelse(y_pred > 0.5, 1, 0)
# The confusion Matrix
cm = table(test_set_pca[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set_pca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 2, 'green4', 'red3')))
# Visualising the Test set results
cm
(57+26)/100
View(training_set_pca)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set_pca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Kernel PCA Feature 1', ylab = 'Kernel PCA Feature 1',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set_pca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Kernel PCA Feature 1', ylab = 'Kernel PCA Feature 2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[3:5]
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/dimentionality reduction/kernel PCA")
setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/dimentionality reduction/kernel PCA")
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[3:5]
# Split the dataset into training and test sets
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(kernlab)
kpca = kpca(~.,
data = training_set[-3],
kernel = "rbfdot",
features = 2)
training_set_pca =as.data.frame(predict(kpca, training_set))
training_set_pca$Purchased = training_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
classifier = glm(formula = Purchased ~ .,
family = "binomial",
data = training_set_pca)
y_pred = predict(classifier,type = 'response', newdata = test_set_pca[-3])
y_pred = ifelse(y_pred > 0.5, 1, 0)
# The confusion Matrix
cm = table(test_set_pca[, 3], y_pred)
cm
set.seed(12)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(kernlab)
kpca = kpca(~.,
data = training_set[-3],
kernel = "rbfdot",
features = 2)
training_set_pca =as.data.frame(predict(kpca, training_set))
training_set_pca$Purchased = training_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
# Apply Logistic Regression for the classification task
classifier = glm(formula = Purchased ~ .,
family = "binomial",
data = training_set_pca)
# predict the test set results
y_pred = predict(classifier,type = 'response', newdata = test_set_pca[-3])
y_pred = ifelse(y_pred > 0.5, 1, 0)
# The confusion Matrix
cm = table(test_set_pca[, 3], y_pred)
cm
(61+26)/100
library(ElemStatLearn)
set = training_set_pca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Kernel PCA Feature 1', ylab = 'Kernel PCA Feature 2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
set = test_set_pca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Kernel PCA Feature 1', ylab = 'Kernel PCA Feature 2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
