setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/Reinforcement Learning/UCB")
dataset = read.csv("Ads_CTR_Optimisation.csv")
N = 10000
d = 10
numbers_of_selections = integer(d)
sum_of_rewards = integer(d)
selected_ads = integer()
total_rewards = 0
for (n in range(1:N))
{
max_upper_confidence = 0
ad = 0
for (i in range(1:d))
{
if (numbers_of_selectio[i] > 0)
{
average_reward = numbers_of_selections[i] / sum_of_rewards[i]
delta_i = (3/2 * log(n) / numbers_of_selections[i])
upper_confidence = average_reward + delta_i
}
else
{
upper_confidence = 1e400
}
if (upper_confidence > max_upper_confidence)
{
max_upper_confidence = upper_confidence
ad = i
}
}
selected_ads = append(selected_ads, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sum_of_rewards[ad] = sum_of_rewards[ad] + reward
total_rewards = sum_of_rewards + reward
}
N = 10000
d = 10
numbers_of_selections = integer(d)
sum_of_rewards = integer(d)
selected_ads = integer()
total_rewards = 0
for (n in range(1:N))
{
max_upper_confidence = 0
ad = 0
for (i in range(1:d))
{
if (numbers_of_selections[i] > 0)
{
average_reward = numbers_of_selections[i] / sum_of_rewards[i]
delta_i = (3/2 * log(n) / numbers_of_selections[i])
upper_confidence = average_reward + delta_i
}
else
{
upper_confidence = 1e400
}
if (upper_confidence > max_upper_confidence)
{
max_upper_confidence = upper_confidence
ad = i
}
}
selected_ads = append(selected_ads, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sum_of_rewards[ad] = sum_of_rewards[ad] + reward
total_rewards = sum_of_rewards + reward
}
N = 10000
d = 10
numbers_of_selections = integer(d)
sum_of_rewards = integer(d)
selected_ads = integer()
total_rewards = 0
for (n in range(1:N))
{
max_upper_confidence = 0
ad = 0
for (i in range(1:d))
{
if (numbers_of_selections[i] > 0)
{
average_reward = numbers_of_selections[i] / sum_of_rewards[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_confidence = average_reward + delta_i
}
else
{
upper_confidence = 1e400
}
if (upper_confidence > max_upper_confidence)
{
max_upper_confidence = upper_confidence
ad = i
}
}
selected_ads = append(selected_ads, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sum_of_rewards[ad] = sum_of_rewards[ad] + reward
total_rewards = sum_of_rewards + reward
}
N = 10000
d = 10
numbers_of_selections = integer(d)
sum_of_rewards = integer(d)
selected_ads = integer()
total_rewards = 0
for (n in 1:N)
{
max_upper_confidence = 0
ad = 0
for (i in 1:d)
{
if (numbers_of_selections[i] > 0)
{
average_reward =  sum_of_rewards[i] / numbers_of_selections[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_confidence = average_reward + delta_i
}
else
{
upper_confidence = 1e400
}
if (upper_confidence > max_upper_confidence)
{
max_upper_confidence = upper_confidence
ad = i
}
}
selected_ads = append(selected_ads, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sum_of_rewards[ad] = sum_of_rewards[ad] + reward
total_rewards = sum_of_rewards + reward
}
# Build the model
N = 10000
d = 10
numbers_of_selections = integer(d)
sum_of_rewards = integer(d)
selected_ads = integer()
total_rewards = 0
for (n in 1:N)
{
max_upper_confidence = 0
ad = 0
for (i in 1:d)
{
if (numbers_of_selections[i] > 0)
{
average_reward =  sum_of_rewards[i] / numbers_of_selections[i]
delta_i = sqrt(3/2 * log(n) / numbers_of_selections[i])
upper_confidence = average_reward + delta_i
}
else
{
upper_confidence = 1e400
}
if (upper_confidence > max_upper_confidence)
{
max_upper_confidence = upper_confidence
ad = i
}
}
selected_ads = append(selected_ads, ad)
numbers_of_selections[ad] = numbers_of_selections[ad] + 1
reward = dataset[n, ad]
sum_of_rewards[ad] = sum_of_rewards[ad] + reward
total_rewards = total_rewards + reward
}
selected_ads
hist(selected_ads,
col = "blue",
main = "Histogram of the Selected Ads",
xlab = "Ads",
ylab = "Number of selections"
)
