setwd("/media/zahraa/venus/@current work/Machine_Learning_A-Z_Hands-On_Python_and_R_In_Data_Science/my practice/classification/Logistic Reg")
install.packages("ElemStateLearn")
install.packages("ElemStatLearn")
library("ElemStatLearn", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
dataset = read.csv("Social_Network_Ads.csv")
View(dataset)
dataset = dataset[, 3:5]
library("caTools")
split = sample.split(dataset$Purchased, SplitRatio = 0.25)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
View(training_set)
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
View(training_set)
View(test_set)
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prop_pred = predict(classifier, type = "response", newdata = test_set)
prop_pred
prop_pred = predict(classifier, type = "response", newdata = test_set[-3])
prop_pred
y_pred = ifelse(prop_pred > 0.5, 1, 0)
y_pred
View(test_set)
cm = table(test_set[, 3], y_pred
cm = table(test_set[, 3], y_pred)
cm = table(test_set[, 3], y_pred)
cm
plit = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prop_pred = predict(classifier, type = "response", newdata = test_set)
y_pred = ifelse(prop_pred > 0.5, 1, 0)
cm = table(test_set[, 3], y_pred)
cm
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[, 3:5]
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[, 1:2] = scale(training_set[, 1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set
prop_pred = predict(classifier, type = "response", newdata = test_set)
y_pred = ifelse(prop_pred > 0.5, 1, 0)
prop_pred = predict(classifier, type = "response", newdata = test_se
prop_pred = predict(classifier, type = "response", newdata = test_set)
prop_pred = predict(classifier, type = "response", newdata = test_set)
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
prop_pred = predict(classifier, type = "response", newdata = test_set)
y_pred = ifelse(prop_pred > 0.5, 1, 0)
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
